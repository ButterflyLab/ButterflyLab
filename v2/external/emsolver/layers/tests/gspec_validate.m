function gspec_validate(gs,lay,kr,kz)
% Helper function used by test_gspec - computes spectral domain Greens
% function using the general formulas and tlines calculator, and validates
% results generated by gspec_calc.

freq = lay.freq;

% Free-space wavenumber.
k0 = freq * sqrt(eps0*mu0);

% Electric permittivity of the layers. Vector of length N.
lay_eps = [ lay.eps1 lay.eps2 lay.eps3 ];

% The source (and observation) layer.
iobs = 2;

[ tle tlh ] = lay_tlines(lay,kr,kz);

% Perfect electric conductor at the bottom?
if isinf(lay.eps1),
	lay_eps(1) = [];
	iobs = 1;
end

% Perfect electric conductor at the top?
if isinf(lay.eps3),
	lay_eps(end) = [];
end

% Wavenumbers for each layer.
lay_k = freq * sqrt(lay_eps .* mu0);

[ vi0e, vi1e, vi2e, vi3e, vi4e ] = fact_vi(tle,iobs);
[ vv0e, vv1e, vv2e, vv3e, vv4e ] = fact_vv(tle,iobs);
[ ii0e, ii1e, ii2e, ii3e, ii4e ] = fact_ii(tle,iobs);
[ iv0e, iv1e, iv2e, iv3e, iv4e ] = fact_iv(tle,iobs);

[ vi0h, vi1h, vi2h, vi3h, vi4h ] = fact_vi(tlh,iobs);
[ vv0h, vv1h, vv2h, vv3h, vv4h ] = fact_vv(tlh,iobs);
[ ii0h, ii1h, ii2h, ii3h, ii4h ] = fact_ii(tlh,iobs);
[ iv0h, iv1h, iv2h, iv3h, iv4h ] = fact_iv(tlh,iobs);

% Intermediate values
mu_j = mu_i = mu0;
eps_j = eps_i = lay_eps(iobs);
ki = lay_k(iobs);
kr2 = kr.*kr;

threshold = 5e-19;

Gvv0_test = vi0h;
Gvv1_test = vi1h;
Gvv2_test = vi2h;
Gvv3_test = vi3h;
Gvv4_test = vi4h;

assertEquals(Gvv0_test, gs.Gvv0, threshold);
assertEquals(Gvv1_test, gs.Gvv1, threshold);
assertEquals(Gvv2_test, gs.Gvv2, threshold);
assertEquals(Gvv3_test, gs.Gvv3, threshold);
assertEquals(Gvv4_test, gs.Gvv4, threshold);

Fvv0_test = iv0e;
Fvv1_test = iv1e;
Fvv2_test = iv2e;
Fvv3_test = iv3e;
Fvv4_test = iv4e;

assertEquals(Fvv0_test, gs.Fvv0, threshold);
assertEquals(Fvv1_test, gs.Fvv1, threshold);
assertEquals(Fvv2_test, gs.Fvv2, threshold);
assertEquals(Fvv3_test, gs.Fvv3, threshold);
assertEquals(Fvv4_test, gs.Fvv4, threshold);

Gzz0_test = mu_i/eps_j*iv0e;
Gzz1_test = mu_i/eps_j*iv1e;
Gzz2_test = mu_i/eps_j*iv2e;
Gzz3_test = mu_i/eps_j*iv3e;
Gzz4_test = mu_i/eps_j*iv4e;

assertEquals(Gzz0_test, gs.Gzz0);
assertEquals(Gzz1_test, gs.Gzz1, 1e-13);
assertEquals(Gzz2_test, gs.Gzz2, 1e-13);
assertEquals(Gzz3_test, gs.Gzz3, 1e-13);
assertEquals(Gzz4_test, gs.Gzz4, 1e-13);

Fzz0_test = eps_i/mu_j*vi0h;
Fzz1_test = eps_i/mu_j*vi1h;
Fzz2_test = eps_i/mu_j*vi2h;
Fzz3_test = eps_i/mu_j*vi3h;
Fzz4_test = eps_i/mu_j*vi4h;

assertEquals(Fzz0_test, gs.Fzz0);
assertEquals(Fzz1_test, gs.Fzz1, 5e-14);
assertEquals(Fzz2_test, gs.Fzz2, 5e-14);
assertEquals(Fzz3_test, gs.Fzz3, 5e-14);
assertEquals(Fzz4_test, gs.Fzz4, 5e-14);

Gzu1_test = freq*mu_i*(ii1h-ii1e)./kr2;
Gzu2_test = freq*mu_i*(ii2h-ii2e)./kr2;
Gzu3_test = freq*mu_i*(ii3h-ii3e)./kr2;
Gzu4_test = freq*mu_i*(ii4h-ii4e)./kr2;

assertEquals(0, ii0h-ii0e); % Make sure these terms cancel out.
assertEquals(Gzu1_test, gs.Gzu1);
assertEquals(Gzu2_test, gs.Gzu2);
assertEquals(Gzu3_test, gs.Gzu3);
assertEquals(Gzu4_test, gs.Gzu4);

Fzu1_test = freq*eps_i*(vv1e-vv1h)./kr2;
Fzu2_test = freq*eps_i*(vv2e-vv2h)./kr2;
Fzu3_test = freq*eps_i*(vv3e-vv3h)./kr2;
Fzu4_test = freq*eps_i*(vv4e-vv4h)./kr2;

assertEquals(0, ii0h-ii0e); % Make sure these terms cancel out.
assertEquals(Fzu1_test, gs.Fzu1);
assertEquals(Fzu2_test, gs.Fzu2);
assertEquals(Fzu3_test, gs.Fzu3);
assertEquals(Fzu4_test, gs.Fzu4);

Kf0_test = (vi0h - vi0e)./kr2;
Kf1_test = (vi1h - vi1e)./kr2;
Kf2_test = (vi2h - vi2e)./kr2;
Kf3_test = (vi3h - vi3e)./kr2;
Kf4_test = (vi4h - vi4e)./kr2;

assertEquals(Kf0_test, gs.Kf0);
assertEquals(Kf1_test, gs.Kf1);
assertEquals(Kf2_test, gs.Kf2);
assertEquals(Kf3_test, gs.Kf3);
assertEquals(Kf4_test, gs.Kf4);

Cf1_test = j*freq*mu_j*(vv1h-vv1e)./kr2;
Cf2_test = j*freq*mu_j*(vv2h-vv2e)./kr2;
Cf3_test = j*freq*mu_j*(vv3h-vv3e)./kr2;
Cf4_test = j*freq*mu_j*(vv4h-vv4e)./kr2;

assertEquals(0, vv0h-vv0e); % Make sure these terms cancel out.
assertEquals(Cf1_test, gs.Cf1);
assertEquals(Cf2_test, gs.Cf2);
assertEquals(Cf3_test, gs.Cf3);
assertEquals(Cf4_test, gs.Cf4);
